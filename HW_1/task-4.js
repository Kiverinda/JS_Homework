// defer

// Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда он загрузится.

// Скрипты с defer никогда не блокируют страницу.
// Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.
// Следующий пример это показывает:
// Отложенные с помощью defer скрипты сохраняют порядок относительно друг друга, как и обычные скрипты.
// Атрибут defer предназначен только для внешних скриптов
// Атрибут defer будет проигнорирован, если в теге <script> нет src.

// async

// Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.

// Событие DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того, как страница будет готова),
// …так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше)
// Остальные скрипты не ждут async, и скрипты async не ждут другие скрипты.
// Так что если у нас есть несколько скриптов с async, они могут выполняться в любом порядке. То, что первое загрузится – запустится в первую очередь

// ВАЖНО!

// Пожалуйста, помните, что когда вы используете defer, страница видна до того, как скрипт загрузится.
// Пользователь может знакомиться с содержимым страницы, читать её, но графические компоненты пока отключены.
// Поэтому обязательно должна быть индикация загрузки, нерабочие кнопки – отключены с помощью CSS или другим образом. Чтобы пользователь явно видел, что уже готово, а что пока нет.

// Приминение

// На практике defer используется для скриптов, которым требуется доступ ко всему DOM и/или важен их относительный порядок выполнения.
// А async хорош для независимых скриптов, например счётчиков и рекламы, относительный порядок выполнения которых не играет роли.
